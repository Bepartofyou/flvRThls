/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "flvRThls"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "flvRThls"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.0.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * flvfile_arg;	/**< @brief the input flv file.  */
  char * flvfile_orig;	/**< @brief the input flv file original value given at command line.  */
  const char *flvfile_help; /**< @brief the input flv file help description.  */
  int segmengttime_arg;	/**< @brief set segment time, unit: s  (default='5').  */
  char * segmengttime_orig;	/**< @brief set segment time, unit: s  original value given at command line.  */
  const char *segmengttime_help; /**< @brief set segment time, unit: s  help description.  */
  char * outpath_arg;	/**< @brief the output ts file path (default='./').  */
  char * outpath_orig;	/**< @brief the output ts file path original value given at command line.  */
  const char *outpath_help; /**< @brief the output ts file path help description.  */
  char * domain_arg;	/**< @brief domain prefix for m3u8 (default='').  */
  char * domain_orig;	/**< @brief domain prefix for m3u8 original value given at command line.  */
  const char *domain_help; /**< @brief domain prefix for m3u8 help description.  */
  char * random_arg;	/**< @brief random prefix for ts files (default='').  */
  char * random_orig;	/**< @brief random prefix for ts files original value given at command line.  */
  const char *random_help; /**< @brief random prefix for ts files help description.  */
  int key_ID_start_arg;	/**< @brief flv keyframe start index number, '0' means min index (default='0').  */
  char * key_ID_start_orig;	/**< @brief flv keyframe start index number, '0' means min index original value given at command line.  */
  const char *key_ID_start_help; /**< @brief flv keyframe start index number, '0' means min index help description.  */
  int key_ID_end_arg;	/**< @brief flv keyframe end index number, '-1' means max index (default='-1').  */
  char * key_ID_end_orig;	/**< @brief flv keyframe end index number, '-1' means max index original value given at command line.  */
  const char *key_ID_end_help; /**< @brief flv keyframe end index number, '-1' means max index help description.  */
  int ts_start_arg;	/**< @brief ts start index number (default='-1').  */
  char * ts_start_orig;	/**< @brief ts start index number original value given at command line.  */
  const char *ts_start_help; /**< @brief ts start index number help description.  */
  int ts_end_arg;	/**< @brief ts start index number (default='-1').  */
  char * ts_end_orig;	/**< @brief ts start index number original value given at command line.  */
  const char *ts_end_help; /**< @brief ts start index number help description.  */
  int m3u8_flag;	/**< @brief generate m3u8 file Flag with default 'off' (default=off).  */
  const char *m3u8_help; /**< @brief generate m3u8 file Flag with default 'off' help description.  */
  int ts_flag;	/**< @brief generate ts files Flag with default 'off' (default=off).  */
  const char *ts_help; /**< @brief generate ts files Flag with default 'off' help description.  */
  int audio_cc_arg;	/**< @brief TS audio slices count (default='0').  */
  char * audio_cc_orig;	/**< @brief TS audio slices count original value given at command line.  */
  const char *audio_cc_help; /**< @brief TS audio slices count help description.  */
  int video_cc_arg;	/**< @brief TS video slices count (default='0').  */
  char * video_cc_orig;	/**< @brief TS video slices count original value given at command line.  */
  const char *video_cc_help; /**< @brief TS video slices count help description.  */
  int aframe_base_arg;	/**< @brief audio frame base time (default='0').  */
  char * aframe_base_orig;	/**< @brief audio frame base time original value given at command line.  */
  const char *aframe_base_help; /**< @brief audio frame base time help description.  */
  int aframe_pts_arg;	/**< @brief audio frame pts (default='0').  */
  char * aframe_pts_orig;	/**< @brief audio frame pts original value given at command line.  */
  const char *aframe_pts_help; /**< @brief audio frame pts help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int flvfile_given ;	/**< @brief Whether flvfile was given.  */
  unsigned int segmengttime_given ;	/**< @brief Whether segmengttime was given.  */
  unsigned int outpath_given ;	/**< @brief Whether outpath was given.  */
  unsigned int domain_given ;	/**< @brief Whether domain was given.  */
  unsigned int random_given ;	/**< @brief Whether random was given.  */
  unsigned int key_ID_start_given ;	/**< @brief Whether key_ID_start was given.  */
  unsigned int key_ID_end_given ;	/**< @brief Whether key_ID_end was given.  */
  unsigned int ts_start_given ;	/**< @brief Whether ts_start was given.  */
  unsigned int ts_end_given ;	/**< @brief Whether ts_end was given.  */
  unsigned int m3u8_given ;	/**< @brief Whether m3u8 was given.  */
  unsigned int ts_given ;	/**< @brief Whether ts was given.  */
  unsigned int audio_cc_given ;	/**< @brief Whether audio_cc was given.  */
  unsigned int video_cc_given ;	/**< @brief Whether video_cc was given.  */
  unsigned int aframe_base_given ;	/**< @brief Whether aframe_base was given.  */
  unsigned int aframe_pts_given ;	/**< @brief Whether aframe_pts was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
